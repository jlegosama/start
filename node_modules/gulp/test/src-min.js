"use strict";var gulp=require("../"),should=require("should"),join=require("path").join;require("mocha");describe("gulp input stream",function(){describe("src()",function(){it("should return a stream",function(e){var t=gulp.src(join(__dirname,"./fixtures/*.coffee"));should.exist(t);should.exist(t.on);e()});it("should return a input stream from a flat glob",function(e){var t=gulp.src(join(__dirname,"./fixtures/*.coffee"));t.on("error",e);t.on("data",function(e){should.exist(e);should.exist(e.path);should.exist(e.contents);join(e.path,"").should.equal(join(__dirname,"./fixtures/test.coffee"));String(e.contents).should.equal("this is a test")});t.on("end",function(){e()})});it("should return a input stream for multiple globs",function(e){var t=[join(__dirname,"./fixtures/stuff/run.dmc"),join(__dirname,"./fixtures/stuff/test.dmc")],n=gulp.src(t),r=[];n.on("error",e);n.on("data",function(e){should.exist(e);should.exist(e.path);r.push(e)});n.on("end",function(){r.length.should.equal(2);r[0].path.should.equal(t[0]);r[1].path.should.equal(t[1]);e()})});it("should return a input stream for multiple globs, with negation",function(e){var t=join(__dirname,"./fixtures/stuff/run.dmc"),n=[join(__dirname,"./fixtures/stuff/*.dmc"),"!"+join(__dirname,"./fixtures/stuff/test.dmc")],r=gulp.src(n),i=[];r.on("error",e);r.on("data",function(e){should.exist(e);should.exist(e.path);i.push(e)});r.on("end",function(){i.length.should.equal(1);i[0].path.should.equal(t);e()})});it("should return a input stream for multiple globs, with negation",function(e){var t=join(__dirname,"./fixtures/stuff/run.dmc"),n=[join(__dirname,"./fixtures/stuff/run.dmc"),"!"+join(__dirname,"./fixtures/stuff/test.dmc")],r=gulp.src(n),i=[];r.on("error",e);r.on("data",function(e){should.exist(e);should.exist(e.path);i.push(e)});r.on("end",function(){i.length.should.equal(1);i[0].path.should.equal(t);e()})});it("should return a input stream with no contents when read is false",function(e){var t=gulp.src(join(__dirname,"./fixtures/*.coffee"),{read:!1});t.on("error",e);t.on("data",function(e){should.exist(e);should.exist(e.path);should.not.exist(e.contents);join(e.path,"").should.equal(join(__dirname,"./fixtures/test.coffee"))});t.on("end",function(){e()})});it("should return a input stream with contents as stream when buffer is false",function(e){var t=gulp.src(join(__dirname,"./fixtures/*.coffee"),{buffer:!1});t.on("error",e);t.on("data",function(t){should.exist(t);should.exist(t.path);should.exist(t.contents);var n="";t.contents.on("data",function(e){n+=e});t.contents.on("end",function(){n.should.equal("this is a test");e()});join(t.path,"").should.equal(join(__dirname,"./fixtures/test.coffee"))})});it("should return a input stream from a deep glob",function(e){var t=gulp.src(join(__dirname,"./fixtures/**/*.jade"));t.on("error",e);t.on("data",function(e){should.exist(e);should.exist(e.path);should.exist(e.contents);join(e.path,"").should.equal(join(__dirname,"./fixtures/test/run.jade"));String(e.contents).should.equal("test template")});t.on("end",function(){e()})});it("should return a input stream from a deeper glob",function(e){var t=gulp.src(join(__dirname,"./fixtures/**/*.dmc")),n=0;t.on("error",e);t.on("data",function(){++n});t.on("end",function(){n.should.equal(2);e()})});it("should return a file stream from a flat path",function(e){var t=0,n=gulp.src(join(__dirname,"./fixtures/test.coffee"));n.on("error",e);n.on("data",function(e){++t;should.exist(e);should.exist(e.path);should.exist(e.contents);join(e.path,"").should.equal(join(__dirname,"./fixtures/test.coffee"));String(e.contents).should.equal("this is a test")});n.on("end",function(){t.should.equal(1);e()})})})});