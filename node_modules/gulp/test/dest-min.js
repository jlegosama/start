"use strict";var gulp=require("../"),should=require("should"),join=require("path").join,rimraf=require("rimraf"),fs=require("graceful-fs");require("mocha");var outpath=join(__dirname,"./out-fixtures");describe("gulp output stream",function(){describe("dest()",function(){function e(e,t){var n=gulp.src(join(__dirname,"./fixtures/stuff"),e),r=n.pipe(gulp.dest(outpath));r.on("error",t);r.on("data",function(e){should.exist(e);should.exist(e.path);join(e.path,"").should.equal(join(outpath,"./stuff"))});r.on("end",function(){fs.exists(join(outpath,"stuff"),function(e){should(e).be.ok;t()})})}beforeEach(rimraf.bind(null,outpath));afterEach(rimraf.bind(null,outpath));it("should return a stream",function(e){var t=gulp.dest(join(__dirname,"./fixtures/"));should.exist(t);should.exist(t.on);e()});it("should return a output stream that writes files",function(e){var t=gulp.src(join(__dirname,"./fixtures/**/*.txt")),n=gulp.dest(outpath);t.pipe(n);n.on("error",e);n.on("data",function(e){should.exist(e);should.exist(e.path);should.exist(e.contents);join(e.path,"").should.equal(join(outpath,"./copy/example.txt"));String(e.contents).should.equal("this is a test")});n.on("end",function(){fs.readFile(join(outpath,"copy","example.txt"),function(t,n){should.not.exist(t);should.exist(n);String(n).should.equal("this is a test");e()})})});it("should return a output stream that does not write non-read files",function(e){var t=gulp.src(join(__dirname,"./fixtures/**/*.txt"),{read:!1}),n=gulp.dest(outpath);t.pipe(n);n.on("error",e);n.on("data",function(e){should.exist(e);should.exist(e.path);should.not.exist(e.contents);join(e.path,"").should.equal(join(outpath,"./copy/example.txt"))});n.on("end",function(){fs.readFile(join(outpath,"copy","example.txt"),function(t,n){should.exist(t);should.not.exist(n);e()})})});it("should return a output stream that writes streaming files",function(e){var t=gulp.src(join(__dirname,"./fixtures/**/*.txt"),{buffer:!1}),n=t.pipe(gulp.dest(outpath));n.on("error",e);n.on("data",function(e){should.exist(e);should.exist(e.path);should.exist(e.contents);join(e.path,"").should.equal(join(outpath,"./copy/example.txt"))});n.on("end",function(){fs.readFile(join(outpath,"copy","example.txt"),function(t,n){should.not.exist(t);should.exist(n);String(n).should.equal("this is a test");e()})})});it("should return a output stream that writes streaming files into new directories",function(t){e({},t)});it("should return a output stream that writes streaming files into new directories (buffer: false)",function(t){e({buffer:!1},t)});it("should return a output stream that writes streaming files into new directories (read: false)",function(t){e({read:!1},t)});it("should return a output stream that writes streaming files into new directories (read: false, buffer: false)",function(t){e({buffer:!1,read:!1},t)})})});