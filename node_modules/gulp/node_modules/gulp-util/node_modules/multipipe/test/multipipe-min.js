function Readable(){var e=new Stream.Readable({objectMode:!0});e._read=function(){this.push("a");this.push(null)};return e}function Transform(){var e=new Stream.Transform({objectMode:!0});e._transform=function(e,t,n){n(null,e.toUpperCase())};return e}function Writable(e){var t=new Stream.Writable({objectMode:!0});t._write=function(t,n,r){assert.equal(t,"A");r();e()};return t}var assert=require("assert"),pipe=require(".."),Stream=require("stream");describe("pipe(a)",function(){it("should return a",function(){var e=Readable(),t=pipe(e);assert.equal(t,e)})});describe("pipe(a, b, c)",function(){it("should pipe internally",function(e){pipe(Readable(),Transform(),Writable(e))});it("should be writable",function(e){var t=pipe(Transform(),Writable(e));assert(t.writable);Readable().pipe(t)});it("should be readable",function(e){var t=pipe(Readable(),Transform());assert(t.readable);t.pipe(Writable(e))});it("should be readable and writable",function(e){var t=pipe(Transform(),Transform());assert(t.readable);assert(t.writable);Readable().pipe(t).pipe(Writable(e))});it("should aggregate errors",function(e){var t=Transform(),n=Transform(),r=Transform(),i=pipe(t,n,r),s=new Error,o=0;i.on("error",function(t){o++;assert.equal(t,s);assert(o<=3);o==3&&e()});t.emit("error",s);n.emit("error",s);r.emit("error",s)})});