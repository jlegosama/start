function parseInvalid(){invalid.forEach(function(e){assert.throws(function(){nthCheck.parse(e)},SyntaxError,e)})}function parseValid(){Object.keys(valid).forEach(function(e){assert.deepEqual(nthCheck.parse(e),valid[e],e)})}function testValid(){Object.keys(valid).forEach(function(e){testFormula(valid[e],e)})}function testFormula(e,t){var n=valArray.filter(nthCheck.compile(e)),r=stupidNth(e);try{assert.deepEqual(n,r,t)}catch(i){i.expected=JSON.stringify(r)+" "+t;i.actual=JSON.stringify(n)+" "+t;throw i}}function stupidNth(e,t){var n=e[0],r=e[1];return n===0&&r>0?[r-1]:valArray.filter(function(e){for(var t=r,i=valArray.length;n>0?t<=i:t>=1;t+=n)if(e===valArray[t-1])return!0})}var nthCheck=require("../lib/nth-check.js"),assert=require("assert"),invalid=["-","asdf","2n+-0","2+0","- 1n","-1 n"],valid={1:[0,1],2:[0,2],3:[0,3],5:[0,5]," 1 ":[0,1]," 5 ":[0,5],"+2n + 1":[2,1],"-1":[0,-1],"-1n + 3":[-1,3],"-1n+3":[-1,3],"-n+2":[-1,2],"-n+3":[-1,3],"0n+3":[1,3],"1n":[1,0],"1n+0":[1,0],"2n":[2,0],"2n + 1":[2,1],"2n+1":[2,1],"3n":[3,0],"3n+0":[3,0],"3n+1":[3,1],"3n+2":[3,2],"3n+3":[3,3],"3n-1":[3,-1],"3n-2":[3,-2],"3n-3":[3,-3],even:[2,0],n:[1,0],"n+2":[1,2],odd:[2,1],"-4n+13":[-4,13],"-2n + 12":[-2,12]},LIMIT=1e3,valArray=function(){var e=[];for(var t=0;t<=LIMIT;t++)e.push(t);return e}();describe("nth-checks",function(){describe("parser",function(){it("parse invalid",parseInvalid);it("parse valid",parseValid)});it("check values",testValid)});