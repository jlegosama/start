function forEach(e,t){if(e.forEach)return e.forEach(t);for(var n=0;n<e.length;n++)t(e[n],n)}function duplex(e,t){function i(t){function r(){return e[t].apply(e,arguments)}n[t]=r}function s(e){function r(){n.emit(e);var r=t[e];if(r)return r.apply(t,arguments);t.emit(e)}n[e]=r}function o(e){function r(){var t=slice.call(arguments);t.unshift(e);n.emit.apply(n,t)}t.on(e,r)}function u(){if(r)return;r=!0;var e=slice.call(arguments);e.unshift("end");n.emit.apply(n,e)}function a(e){n.emit("error",e)}var n=new Stream,r=!1;forEach(writeMethods,i);forEach(readMethods,s);forEach(readEvents,o);t.on("end",u);e.on("drain",function(){n.emit("drain")});e.on("error",a);t.on("error",a);n.writable=e.writable;n.readable=t.readable;return n}var Stream=require("stream"),writeMethods=["write","end","destroy"],readMethods=["resume","pause"],readEvents=["data","close"],slice=Array.prototype.slice;module.exports=duplex;