var test=require("tape"),forEach=require("../foreach.js");test("second argument: iterator",function(e){var t=[];e.throws(function(){forEach(t)},TypeError,"undefined is not a function");e.throws(function(){forEach(t,null)},TypeError,"null is not a function");e.throws(function(){forEach(t,"")},TypeError,"string is not a function");e.throws(function(){forEach(t,/a/)},TypeError,"regex is not a function");e.throws(function(){forEach(t,!0)},TypeError,"true is not a function");e.throws(function(){forEach(t,!1)},TypeError,"false is not a function");e.throws(function(){forEach(t,NaN)},TypeError,"NaN is not a function");e.throws(function(){forEach(t,42)},TypeError,"42 is not a function");e.doesNotThrow(function(){forEach(t,function(){})},"function is a function");e.doesNotThrow(function(){forEach(t,setTimeout)},"setTimeout is a function");typeof window!="undefined"&&e.doesNotThrow(function(){forEach(t,window.alert)},"alert is a function");e.end()});test("array",function(e){var t=[1,2,3];e.test("iterates over every item",function(e){var n=0;forEach(t,function(){n+=1});e.equal(n,t.length,"iterates "+t.length+" times");e.end()});e.test("first iterator argument",function(e){var n=0;e.plan(t.length);forEach(t,function(r){e.equal(t[n],r,"item "+n+" is passed as first argument");n+=1});e.end()});e.test("second iterator argument",function(e){var n=0;e.plan(t.length);forEach(t,function(t,r){e.equal(n,r,"index "+r+" is passed as second argument");n+=1});e.end()});e.test("third iterator argument",function(e){e.plan(t.length);forEach(t,function(n,r,i){e.deepEqual(t,i,"array is passed as third argument")});e.end()});e.test("context argument",function(e){var n={};e.plan(t.length);forEach(t,function(){e.equal(this,n,'"this" is the passed context')},n);e.end()});e.end()});test("object",function(e){var t={a:1,b:2,c:3},n=["a","b","c"],r=function(){this.a=1;this.b=2};r.prototype.c=3;var i=["a","b"];e.test("iterates over every object literal key",function(e){var r=0;forEach(t,function(){r+=1});e.equal(r,n.length,"iterated "+r+" times");e.end()});e.test("iterates only over own keys",function(e){var t=0;forEach(new r,function(){t+=1});e.equal(t,i.length,"iterated "+i.length+" times");e.end()});e.test("first iterator argument",function(e){var r=0;e.plan(n.length);forEach(t,function(i){e.equal(t[n[r]],i,"item at key "+n[r]+" is passed as first argument");r+=1});e.end()});e.test("second iterator argument",function(e){var r=0;e.plan(n.length);forEach(t,function(t,i){e.equal(n[r],i,"key "+i+" is passed as second argument");r+=1});e.end()});e.test("third iterator argument",function(e){e.plan(n.length);forEach(t,function(n,r,i){e.deepEqual(t,i,"object is passed as third argument")});e.end()});e.test("context argument",function(e){var t={};e.plan(1);forEach({foo:"bar"},function(){e.equal(this,t,'"this" is the passed context')},t);e.end()});e.end()});test("string",function(e){var t="str";e.test("second iterator argument",function(e){var n=0;e.plan(t.length*2+1);forEach(t,function(r,i){e.equal(n,i,"index "+i+" is passed as second argument");e.equal(t.charAt(i),r);n+=1});e.equal(n,t.length,"iterates "+t.length+" times")});e.end()});