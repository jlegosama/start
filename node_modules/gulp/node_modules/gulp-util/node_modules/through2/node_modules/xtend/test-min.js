var test=require("tape"),extend=require("./"),mutableExtend=require("./mutable");test("merge",function(e){var t={a:"foo"},n={b:"bar"};e.deepEqual(extend(t,n),{a:"foo",b:"bar"});e.end()});test("replace",function(e){var t={a:"foo"},n={a:"bar"};e.deepEqual(extend(t,n),{a:"bar"});e.end()});test("undefined",function(e){var t={a:undefined},n={b:"foo"};e.deepEqual(extend(t,n),{a:undefined,b:"foo"});e.deepEqual(extend(n,t),{a:undefined,b:"foo"});e.end()});test("handle 0",function(e){var t={a:"default"},n={a:0};e.deepEqual(extend(t,n),{a:0});e.deepEqual(extend(n,t),{a:"default"});e.end()});test("is immutable",function(e){var t={};extend(t,{foo:"bar"});e.equal(t.foo,undefined);e.end()});test("null as argument",function(e){var t={foo:"bar"},n=null,r=void 0;e.deepEqual(extend(n,t,r),{foo:"bar"});e.end()});test("mutable",function(e){var t={foo:"bar"};mutableExtend(t,{bar:"baz"});e.equal(t.bar,"baz");e.end()});