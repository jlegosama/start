var util=require("../"),should=require("should"),path=require("path");require("mocha");describe("PluginError()",function(){it("should print the plugin name in toString",function(e){var t=new util.PluginError("test","something broke");t.toString().indexOf("test").should.not.equal(-1);e()});it("should not include the stack by default in toString",function(e){var t=new util.PluginError("test","something broke");t.toString().indexOf("at").should.equal(-1);e()});it("should include the stack when specified in toString",function(e){var t=new util.PluginError("test","something broke",{stack:"at huh",showStack:!0});t.toString().indexOf("at").should.not.equal(-1);e()});it("should take arguments as one object",function(e){var t=new util.PluginError({plugin:"test",message:"something broke"});t.plugin.should.equal("test");t.message.should.equal("something broke");e()});it("should take arguments as plugin name and one object",function(e){var t=new util.PluginError("test",{message:"something broke"});t.plugin.should.equal("test");t.message.should.equal("something broke");e()});it("should take arguments as plugin name and message",function(e){var t=new util.PluginError("test","something broke");t.plugin.should.equal("test");t.message.should.equal("something broke");e()});it("should take arguments as plugin name, message, and one object",function(e){var t=new util.PluginError("test","something broke",{showStack:!0});t.plugin.should.equal("test");t.message.should.equal("something broke");t.showStack.should.equal(!0);e()});it("should take arguments as plugin name, error, and one object",function(e){var t=new Error("something broke"),n=new util.PluginError("test",t,{showStack:!0});n.plugin.should.equal("test");n.message.should.equal("something broke");n.showStack.should.equal(!0);e()})});