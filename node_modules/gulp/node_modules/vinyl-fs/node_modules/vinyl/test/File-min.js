var File=require("../"),Stream=require("stream"),fs=require("fs"),should=require("should");require("mocha");describe("File",function(){describe("constructor()",function(){it("should default cwd to process.cwd",function(e){var t=new File;t.cwd.should.equal(process.cwd());e()});it("should default base to cwd",function(e){var t="/",n=new File({cwd:t});n.base.should.equal(t);e()});it("should default base to cwd even when none is given",function(e){var t=new File;t.base.should.equal(process.cwd());e()});it("should default path to null",function(e){var t=new File;should.not.exist(t.path);e()});it("should default stat to null",function(e){var t=new File;should.not.exist(t.stat);e()});it("should default contents to null",function(e){var t=new File;should.not.exist(t.contents);e()});it("should set base to given value",function(e){var t="/",n=new File({base:t});n.base.should.equal(t);e()});it("should set cwd to given value",function(e){var t="/",n=new File({cwd:t});n.cwd.should.equal(t);e()});it("should set path to given value",function(e){var t="/test.coffee",n=new File({path:t});n.path.should.equal(t);e()});it("should set stat to given value",function(e){var t={},n=new File({stat:t});n.stat.should.equal(t);e()});it("should set contents to given value",function(e){var t=new Buffer("test"),n=new File({contents:t});n.contents.should.equal(t);e()})});describe("isBuffer()",function(){it("should return true when the contents are a Buffer",function(e){var t=new Buffer("test"),n=new File({contents:t});n.isBuffer().should.equal(!0);e()});it("should return false when the contents are a Stream",function(e){var t=new Stream,n=new File({contents:t});n.isBuffer().should.equal(!1);e()});it("should return false when the contents are a null",function(e){var t=new File({contents:null});t.isBuffer().should.equal(!1);e()})});describe("isStream()",function(){it("should return false when the contents are a Buffer",function(e){var t=new Buffer("test"),n=new File({contents:t});n.isStream().should.equal(!1);e()});it("should return true when the contents are a Stream",function(e){var t=new Stream,n=new File({contents:t});n.isStream().should.equal(!0);e()});it("should return false when the contents are a null",function(e){var t=new File({contents:null});t.isStream().should.equal(!1);e()})});describe("isNull()",function(){it("should return false when the contents are a Buffer",function(e){var t=new Buffer("test"),n=new File({contents:t});n.isNull().should.equal(!1);e()});it("should return false when the contents are a Stream",function(e){var t=new Stream,n=new File({contents:t});n.isNull().should.equal(!1);e()});it("should return true when the contents are a null",function(e){var t=new File({contents:null});t.isNull().should.equal(!0);e()})});describe("isDirectory()",function(){var e={isDirectory:function(){return!0}};it("should return false when the contents are a Buffer",function(t){var n=new Buffer("test"),r=new File({contents:n,stat:e});r.isDirectory().should.equal(!1);t()});it("should return false when the contents are a Stream",function(t){var n=new Stream,r=new File({contents:n,stat:e});r.isDirectory().should.equal(!1);t()});it("should return true when the contents are a null",function(t){var n=new File({contents:null,stat:e});n.isDirectory().should.equal(!0);t()})});describe("clone()",function(){it("should copy all attributes over with Buffer",function(e){var t={cwd:"/",base:"/test/",path:"/test/test.coffee",contents:new Buffer("test")},n=new File(t),r=n.clone();r.should.not.equal(n,"refs should be different");r.cwd.should.equal(n.cwd);r.base.should.equal(n.base);r.path.should.equal(n.path);r.contents.should.not.equal(n.contents,"buffer ref should be different");r.contents.toString("utf8").should.equal(n.contents.toString("utf8"));e()});it("should copy all attributes over with Stream",function(e){var t={cwd:"/",base:"/test/",path:"/test/test.coffee",contents:new Stream},n=new File(t),r=n.clone();r.should.not.equal(n,"refs should be different");r.cwd.should.equal(n.cwd);r.base.should.equal(n.base);r.path.should.equal(n.path);r.contents.should.equal(n.contents,"stream ref should be the same");e()});it("should copy all attributes over with null",function(e){var t={cwd:"/",base:"/test/",path:"/test/test.coffee",contents:null},n=new File(t),r=n.clone();r.should.not.equal(n,"refs should be different");r.cwd.should.equal(n.cwd);r.base.should.equal(n.base);r.path.should.equal(n.path);should.not.exist(r.contents);e()});it("should properly clone the `stat` property",function(e){var t={cwd:"/",base:"/test/",path:"/test/test.js",contents:new Buffer("test"),stat:fs.statSync(__filename)},n=new File(t),r=n.clone();r.stat.isFile().should.be.true;r.stat.isDirectory().should.be.false;should(n.stat instanceof fs.Stats).be.true;should(r.stat instanceof fs.Stats).be.true;e()})});describe("pipe()",function(){it("should write to stream with Buffer",function(e){var t={cwd:"/",base:"/test/",path:"/test/test.coffee",contents:new Buffer("test")},n=new File(t),r=new Stream.PassThrough;r.on("data",function(e){should.exist(e);(e instanceof Buffer).should.equal(!0,"should write as a buffer");e.toString("utf8").should.equal(t.contents.toString("utf8"))});r.on("end",function(t){e()});var i=n.pipe(r);i.should.equal(r,"should return the stream")});it("should pipe to stream with Stream",function(e){var t=new Buffer("test"),n={cwd:"/",base:"/test/",path:"/test/test.coffee",contents:new Stream.PassThrough},r=new File(n),i=new Stream.PassThrough;i.on("data",function(n){should.exist(n);(n instanceof Buffer).should.equal(!0,"should write as a buffer");n.toString("utf8").should.equal(t.toString("utf8"));e()});var s=r.pipe(i);s.should.equal(i,"should return the stream");r.contents.write(t)});it("should do nothing with null",function(e){var t={cwd:"/",base:"/test/",path:"/test/test.coffee",contents:null},n=new File(t),r=new Stream.PassThrough;r.on("data",function(e){throw new Error("should not write")});r.on("end",function(){e()});var i=n.pipe(r);i.should.equal(r,"should return the stream")});it("should write to stream with Buffer",function(e){var t={cwd:"/",base:"/test/",path:"/test/test.coffee",contents:new Buffer("test")},n=new File(t),r=new Stream.PassThrough;r.on("data",function(n){should.exist(n);(n instanceof Buffer).should.equal(!0,"should write as a buffer");n.toString("utf8").should.equal(t.contents.toString("utf8"));e()});r.on("end",function(e){throw new Error("should not end")});var i=n.pipe(r,{end:!1});i.should.equal(r,"should return the stream")});it("should pipe to stream with Stream",function(e){var t=new Buffer("test"),n={cwd:"/",base:"/test/",path:"/test/test.coffee",contents:new Stream.PassThrough},r=new File(n),i=new Stream.PassThrough;i.on("data",function(n){should.exist(n);(n instanceof Buffer).should.equal(!0,"should write as a buffer");n.toString("utf8").should.equal(t.toString("utf8"));e()});i.on("end",function(e){throw new Error("should not end")});var s=r.pipe(i,{end:!1});s.should.equal(i,"should return the stream");r.contents.write(t)});it("should do nothing with null",function(e){var t={cwd:"/",base:"/test/",path:"/test/test.coffee",contents:null},n=new File(t),r=new Stream.PassThrough;r.on("data",function(e){throw new Error("should not write")});r.on("end",function(e){throw new Error("should not end")});var i=n.pipe(r,{end:!1});i.should.equal(r,"should return the stream");process.nextTick(e)})});describe("inspect()",function(){it("should return correct format when no contents and no path",function(e){var t=new File;t.inspect().should.equal("<File >");e()});it("should return correct format when Buffer and no path",function(e){var t=new Buffer("test"),n=new File({contents:t});n.inspect().should.equal("<File <Buffer 74 65 73 74>>");e()});it("should return correct format when Buffer and relative path",function(e){var t=new Buffer("test"),n=new File({cwd:"/",base:"/test/",path:"/test/test.coffee",contents:t});n.inspect().should.equal('<File "test.coffee" <Buffer 74 65 73 74>>');e()});it("should return correct format when Buffer and only path and no base",function(e){var t=new Buffer("test"),n=new File({cwd:"/",path:"/test/test.coffee",contents:t});delete n.base;n.inspect().should.equal('<File "/test/test.coffee" <Buffer 74 65 73 74>>');e()});it("should return correct format when Stream and relative path",function(e){var t=new File({cwd:"/",base:"/test/",path:"/test/test.coffee",contents:new Stream.PassThrough});t.inspect().should.equal('<File "test.coffee" <PassThroughStream>>');e()});it("should return correct format when null and relative path",function(e){var t=new File({cwd:"/",base:"/test/",path:"/test/test.coffee",contents:null});t.inspect().should.equal('<File "test.coffee">');e()})});describe("contents get/set",function(){it("should work with Buffer",function(e){var t=new Buffer("test"),n=new File;n.contents=t;n.contents.should.equal(t);e()});it("should work with Stream",function(e){var t=new Stream.PassThrough,n=new File;n.contents=t;n.contents.should.equal(t);e()});it("should work with null",function(e){var t=null,n=new File;n.contents=t;(n.contents===null).should.equal(!0);e()});it("should not work with string",function(e){var t="test",n=new File;try{n.contents=t}catch(r){should.exist(r);e()}})});describe("relative get/set",function(){it("should error on set",function(e){var t=new File;try{t.relative="test"}catch(n){should.exist(n);e()}});it("should error on get when no base",function(e){var t,n=new File;delete n.base;try{t=n.relative}catch(r){should.exist(r);e()}});it("should error on get when no path",function(e){var t,n=new File;try{t=n.relative}catch(r){should.exist(r);e()}});it("should return a relative path from base",function(e){var t=new File({cwd:"/",base:"/test/",path:"/test/test.coffee"});t.relative.should.equal("test.coffee");e()});it("should return a relative path from cwd",function(e){var t=new File({cwd:"/",path:"/test/test.coffee"});t.relative.should.equal("test/test.coffee");e()})})});