var gs=require("../"),through=require("through"),should=require("should");require("mocha");var path=require("path"),join=path.join,sep=path.sep;describe("glob-stream",function(){describe("create()",function(){it("should return a folder name stream from a glob",function(e){var t=gs.create("./fixtures/whatsgoingon",{cwd:__dirname});should.exist(t);t.on("error",function(e){throw e});t.on("data",function(t){should.exist(t);should.exist(t.path);should.exist(t.base);should.exist(t.cwd);String(t.cwd).should.equal(__dirname);String(t.base).should.equal(join(__dirname,"fixtures"+sep));String(join(t.path,"")).should.equal(join(__dirname,"./fixtures/whatsgoingon"));e()})});it("should return a file name stream from a glob",function(e){var t=gs.create("./fixtures/*.coffee",{cwd:__dirname});should.exist(t);t.on("error",function(e){throw e});t.on("data",function(t){should.exist(t);should.exist(t.path);should.exist(t.base);should.exist(t.cwd);String(t.cwd).should.equal(__dirname);String(t.base).should.equal(join(__dirname,"fixtures"+sep));String(join(t.path,"")).should.equal(join(__dirname,"./fixtures/test.coffee"));e()})});it("should return a file name stream from a glob and respect state",function(e){var t=gs.create("./fixtures/stuff/*.dmc",{cwd:__dirname}),n=t.pipe(through(function(e){this.pause();setTimeout(function(){this.queue(e);this.resume()}.bind(this),500)})),r=0;should.exist(t);t.on("error",function(e){throw e});n.on("data",function(e){r++});n.on("end",function(){r.should.equal(2);e()})});it("should return a correctly ordered file name stream for two globs and specified base",function(e){var t=join(__dirname,"./fixtures"),n=["./whatsgoingon/key/isaidhey/whatsgoingon/test.txt","./test.coffee","./whatsgoingon/test.js"],r=gs.create(n,{cwd:t,base:t}),i=[];r.on("error",e);r.on("data",function(e){should.exist(e);should.exist(e.base);e.base.should.equal(t)});r.on("end",function(){e()})});it("should return a correctly ordered file name stream for two globs and cwdbase",function(e){var t=join(__dirname,"./fixtures"),n=["./whatsgoingon/key/isaidhey/whatsgoingon/test.txt","./test.coffee","./whatsgoingon/test.js"],r=gs.create(n,{cwd:t,cwdbase:!0}),i=[];r.on("error",e);r.on("data",function(e){should.exist(e);should.exist(e.base);e.base.should.equal(t)});r.on("end",function(){e()})});it("should return a file name stream that does not duplicate",function(e){var t=gs.create(["./fixtures/test.coffee","./fixtures/test.coffee"],{cwd:__dirname});should.exist(t);t.on("error",function(e){throw e});t.on("data",function(t){should.exist(t);should.exist(t.path);should.exist(t.base);should.exist(t.cwd);String(t.cwd).should.equal(__dirname);String(t.base).should.equal(join(__dirname,"fixtures"+sep));String(t.path).should.equal(join(__dirname,"./fixtures/test.coffee"));e()})});it("should return a file name stream that does not duplicate when piped twice",function(e){var t=gs.create("./fixtures/test.coffee",{cwd:__dirname}),n=gs.create("./fixtures/test.coffee",{cwd:__dirname});n.pipe(t);should.exist(t);t.on("error",function(e){throw e});t.on("data",function(t){should.exist(t);should.exist(t.path);should.exist(t.base);should.exist(t.cwd);String(t.cwd).should.equal(__dirname);String(t.base).should.equal(join(__dirname,"fixtures"+sep));String(t.path).should.equal(join(__dirname,"./fixtures/test.coffee"));e()})});it("should return a file name stream from a direct path",function(e){var t=gs.create("./fixtures/test.coffee",{cwd:__dirname});should.exist(t);t.on("error",function(e){throw e});t.on("data",function(t){should.exist(t);should.exist(t.path);should.exist(t.base);should.exist(t.cwd);String(t.cwd).should.equal(__dirname);String(t.base).should.equal(join(__dirname,"fixtures"+sep));String(t.path).should.equal(join(__dirname,"./fixtures/test.coffee"));e()})});it("should return a file name stream from a direct path and pause/buffer items",function(e){var t=gs.create("./fixtures/test.coffee",{cwd:__dirname});should.exist(t);t.on("error",function(e){throw e});t.on("data",function(t){should.exist(t);should.exist(t.path);should.exist(t.base);should.exist(t.cwd);String(t.cwd).should.equal(__dirname);String(t.base).should.equal(join(__dirname,"fixtures"+sep));String(t.path).should.equal(join(__dirname,"./fixtures/test.coffee"));e()});t.pause();setTimeout(function(){t.resume()},1e3)});it("should not fuck up direct paths with no cwd",function(e){var t=gs.create(join(__dirname,"./fixtures/test.coffee"));should.exist(t);t.on("error",function(e){throw e});t.on("data",function(t){should.exist(t);should.exist(t.path);should.exist(t.base);should.exist(t.cwd);String(t.cwd).should.equal(process.cwd());String(t.base).should.equal(join(__dirname,"./fixtures/"));String(join(t.path,"")).should.equal(join(__dirname,"./fixtures/test.coffee"));e()})});it("should return a correctly ordered file name stream for three globs with globstars",function(e){var t=[join(__dirname,"./fixtures/**/test.txt"),join(__dirname,"./fixtures/**/test.coffee"),join(__dirname,"./fixtures/**/test.js")],n=gs.create(t,{cwd:__dirname}),r=[];n.on("error",e);n.on("data",function(e){should.exist(e);should.exist(e.path);r.push(e)});n.on("end",function(){r.length.should.equal(3);path.basename(r[0].path).should.equal("test.txt");path.basename(r[1].path).should.equal("test.coffee");path.basename(r[2].path).should.equal("test.js");e()})});it("should return a correctly ordered file name stream for two globs",function(e){var t=[join(__dirname,"./fixtures/whatsgoingon/hey/isaidhey/whatsgoingon/test.txt"),join(__dirname,"./fixtures/test.coffee"),join(__dirname,"./fixtures/whatsgoingon/test.js")],n=gs.create(t,{cwd:__dirname}),r=[];n.on("error",e);n.on("data",function(e){should.exist(e);should.exist(e.path);r.push(e)});n.on("end",function(){r.length.should.equal(3);r[0].path.should.equal(t[0]);r[1].path.should.equal(t[1]);r[2].path.should.equal(t[2]);e()})});it("should return a correctly ordered file name stream for two globs and custom base",function(e){var t=join(__dirname,"./fixtures"),n=["./whatsgoingon/key/isaidhey/whatsgoingon/test.txt","./test.coffee","./whatsgoingon/test.js"],r=gs.create(n,{cwd:t,cwdbase:!0}),i=[];r.on("error",e);r.on("data",function(e){should.exist(e);should.exist(e.base);e.base.should.equal(t)});r.on("end",function(){e()})});it("should return a input stream for multiple globs, with negation (globbing)",function(e){var t=join(__dirname,"./fixtures/stuff/run.dmc"),n=[join(__dirname,"./fixtures/stuff/*.dmc"),"!"+join(__dirname,"./fixtures/stuff/test.dmc")],r=gs.create(n),i=[];r.on("error",e);r.on("data",function(e){should.exist(e);should.exist(e.path);i.push(e)});r.on("end",function(){i.length.should.equal(1);i[0].path.should.equal(t);e()})});it("should return a input stream for multiple globs, with negation (direct)",function(e){var t=join(__dirname,"./fixtures/stuff/run.dmc"),n=[join(__dirname,"./fixtures/stuff/run.dmc"),"!"+join(__dirname,"./fixtures/stuff/test.dmc")],r=gs.create(n),i=[];r.on("error",e);r.on("data",function(e){should.exist(e);should.exist(e.path);i.push(e)});r.on("end",function(){i.length.should.equal(1);i[0].path.should.equal(t);e()})});it("should return a input stream that can be piped to other input streams and remove duplicates",function(e){var t=gs.create(join(__dirname,"./fixtures/stuff/*.dmc")),n=gs.create(join(__dirname,"./fixtures/stuff/*.dmc"));n.pipe(t);var r=[];t.on("error",e);t.on("data",function(e){should.exist(e);should.exist(e.path);r.push(e)});t.on("end",function(){r.length.should.equal(2);e()})});it("should return a file name stream with negation from a glob",function(e){var t=gs.create(["./fixtures/**/*.js","!./**/test.js"],{cwd:__dirname});should.exist(t);t.on("error",function(e){throw e});t.on("data",function(e){throw new Error("file "+e.path+" should have been negated")});t.on("end",function(){e()})});it("should return a file name stream from two globs and a negative",function(e){var t=gs.create(["./fixtures/*.coffee","./fixtures/whatsgoingon/*.coffee"],{cwd:__dirname});should.exist(t);t.on("error",function(e){throw e});t.on("data",function(t){should.exist(t);should.exist(t.path);should.exist(t.base);should.exist(t.cwd);String(t.cwd).should.equal(__dirname);String(t.base).should.equal(join(__dirname,"fixtures"+sep));String(join(t.path,"")).should.equal(join(__dirname,"./fixtures/test.coffee"));e()})})})});