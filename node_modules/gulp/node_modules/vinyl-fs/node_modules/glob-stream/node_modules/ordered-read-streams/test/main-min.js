var should=require("should"),through=require("through2"),OrderedStreams=require("../");describe("ordered-read-streams",function(){it("should end if no streams are given",function(e){var t=new OrderedStreams;t.on("data",function(){e("error")});t.on("end",e)});it("should throw error if one or more streams are not readable",function(e){var t={readable:!1};try{new OrderedStreams(t)}catch(n){n.message.should.equal("All input streams must be readable");e()}});it("should emit data from all streams",function(e){var t=through.obj(function(e,t,n){this.push(e);n()}),n=through.obj(function(e,t,n){this.push(e);n()}),r=through.obj(function(e,t,n){this.push(e);n()}),i=new OrderedStreams([t,n,r]),s=[];i.on("data",function(e){s.push(e)});i.on("end",function(){s.length.should.be.exactly(3);s[0].should.equal("stream 1");s[1].should.equal("stream 2");s[2].should.equal("stream 3");e()});t.write("stream 1");t.end();n.write("stream 2");n.end();r.write("stream 3");r.end()});it("should emit all data event from each stream",function(e){var t=through.obj(function(e,t,n){this.push(e);n()}),n=new OrderedStreams(t),r=[];n.on("data",function(e){r.push(e)});n.on("end",function(){r.length.should.be.exactly(3);e()});t.write("data1");t.write("data2");t.write("data3");t.end()});it("should preserve streams order",function(e){var t=through.obj(function(e,t,n){var r=this;setTimeout(function(){r.push(e);n()},200)}),n=through.obj(function(e,t,n){var r=this;setTimeout(function(){r.push(e);n()},30)}),r=through.obj(function(e,t,n){var r=this;setTimeout(function(){r.push(e);n()},100)}),i=new OrderedStreams([t,n,r]),s=[];i.on("data",function(e){s.push(e)});i.on("end",function(){s.length.should.be.exactly(3);s[0].should.equal("stream 1");s[1].should.equal("stream 2");s[2].should.equal("stream 3");e()});t.write("stream 1");t.end();n.write("stream 2");n.end();r.write("stream 3");r.end()});it("should emit stream errors downstream",function(e){var t=through.obj(function(e,t,n){this.emit("error",new Error("stahp!"));n()}),n=through.obj(function(e,t,n){this.push(e);n()}),r,i,s=new OrderedStreams([t,n]);s.on("data",function(e){i=e});s.on("error",function(e){r=e.message});s.on("end",function(){r.should.equal("stahp!");i.should.equal("Im ok!");e()});t.write("go");t.end();n.write("Im ok!");n.end()})});