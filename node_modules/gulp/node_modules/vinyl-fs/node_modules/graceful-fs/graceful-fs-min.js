// Monkey-patching the fs module.
// It's ugly, but there is simply no other way to do this.
function noop(){}function open(e,t,n,r){typeof n=="function"&&(r=n,n=null);typeof r!="function"&&(r=noop);new OpenReq(e,t,n,r)}function OpenReq(e,t,n,r){this.path=e;this.flags=t;this.mode=n;this.cb=r;Req.call(this)}function readdir(e,t){typeof t!="function"&&(t=noop);new ReaddirReq(e,t)}function ReaddirReq(e,t){this.path=e;this.cb=t;Req.call(this)}function close(e,t){debug("close",e);typeof t!="function"&&(t=noop);delete fds["fd"+e];originalClose.call(fs,e,function(e){onclose();t(e)})}function closeSync(e){try{return originalCloseSync(e)}finally{onclose()}}function Req(){this.done=this.done.bind(this);this.failures=0;this.process()}function enqueue(e){queue.push(e);debug("enqueue %d %s",queue.length,e.constructor.name,e)}function onclose(){var e=queue.shift();if(e){debug("process",e.constructor.name,e);e.process()}}var fs=module.exports=require("fs"),assert=require("assert");require("./polyfills.js");var util=require("util"),debug=noop,util=require("util");util.debuglog?debug=util.debuglog("gfs"):/\bgfs\b/i.test(process.env.NODE_DEBUG||"")&&(debug=function(){var e=util.format.apply(util,arguments);e="GFS: "+e.split(/\n/).join("\nGFS: ");console.error(e)});/\bgfs\b/i.test(process.env.NODE_DEBUG||"")&&process.on("exit",function(){debug("fds",fds);debug(queue);assert.equal(queue.length,0)});var originalOpen=fs.open;fs.open=open;util.inherits(OpenReq,Req);OpenReq.prototype.process=function(){originalOpen.call(fs,this.path,this.flags,this.mode,this.done)};var fds={};OpenReq.prototype.done=function(e,t){debug("open done",e,t);t&&(fds["fd"+t]=this.path);Req.prototype.done.call(this,e,t)};var originalReaddir=fs.readdir;fs.readdir=readdir;util.inherits(ReaddirReq,Req);ReaddirReq.prototype.process=function(){originalReaddir.call(fs,this.path,this.done)};ReaddirReq.prototype.done=function(e,t){Req.prototype.done.call(this,e,t);onclose()};var originalClose=fs.close;fs.close=close;var originalCloseSync=fs.closeSync;fs.closeSync=closeSync;Req.prototype.done=function(e,t){var n=!1;if(e){var r=e.code,n=r==="EMFILE";process.platform==="win32"&&(n=n||r==="OK")}if(n){this.failures++;enqueue(this)}else{var i=this.cb;i(e,t)}};var queue=[];